{"componentChunkName":"component---src-components-templates-blog-post-js","path":"/posts/2020/2020-07-07-ts-tuples/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"TypeScript - 05 - Tuples\",\n  \"date\": \"2020-07-07T00:00:00.000Z\",\n  \"published\": true,\n  \"cover\": \"./img/ts-part-5.png\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"While array's are very helpful in JavaScript, and with the added functionality of TypeScript and adding type checking, we are able to do achieve much more out of a simple array.\"), mdx(\"p\", null, \"But sometimes, we might want different types for different values in our array. That is where tuples come in.\"), mdx(\"h2\", null, \"Tuples\"), mdx(\"p\", null, \"To begin our lesson on tuples, Let's look at the following code:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"let currentChosen\\ncurrentChosen = ['Science Fiction Book', 355, '$9.99']\\n\")), mdx(\"p\", null, \"Let's think of the code as let's say we have an online store, and we want to store the product the user has chosen in an array.\"), mdx(\"p\", null, \"In this case, the array could mean that the first value is the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Title\"), \" of the product, then \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ISBN\"), \" number, finally we have the price.\"), mdx(\"p\", null, \"Now, in order to prevent bugs in our program, we want to type define this. So, we turn this into an Tuple!\"), mdx(\"p\", null, \"So, in a Tuple, it will look like:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"let currentChosen: [string, number, string]\\ncurrentChosen = ['Science Fiction Book', 355, '$9.99']\\n\")), mdx(\"p\", null, \"Now, as many times the variable is reassigned with a different product, it will stay with the same \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type\"), \" definitions.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"let currentChosen: [string, number, string]\\ncurrentChosen = ['Science Fiction Book', 355, '$9.99']\\ncurrentChosen = ['Purple Glass', 3485, '$2.99']\\n\")), mdx(\"p\", null, \"Now, if we wanted to define and initialize at once, we could:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"let currentChosen: [string, number, string] = ['Science Fiction Book', 355 '$9.99'];\\n\")), mdx(\"p\", null, \"Now, it may look a bit odd, but it is no different.\"), mdx(\"h2\", null, \"Incorrect Tuples\"), mdx(\"p\", null, \"Now with much of programming, there are many fundamentals that have a right and wrong way to do things.\"), mdx(\"p\", null, \"Let's look at a few examples on how we can work with Tuples incorrectly.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"let scale: [string, string, number]\\nscale = ['1kg', 1000, 1] // incorrect\\n\")), mdx(\"p\", null, \"In the code above, we do not follow the order of how we define the tuple. The correct way would be:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"let scale: [string, string, number]\\nscale = ['1kg', '1000kg', 1] // correct\\n\")), mdx(\"p\", null, \"Now the above code becomes correct, since we go in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"string\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"string\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"number\"), \" order.\"), mdx(\"h2\", null, \"Challenge\"), mdx(\"p\", null, \"Below are two \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arrays\"), \" that need to be transferred to TypeScript Tuples.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Array 1:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"let fruitScale = ['apples', '1kg', 3422]\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Array 2:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"let newsPaper = [25, 25, 'apples', true]\\n\")), mdx(\"h2\", null, \"Solution\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Array 1:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"let fruitScale: [string, string, number] = ['apples', '1kg', 3422]\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Array 2:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"let newsPaper: [number, number, string, boolean] = [25, 25, 'apples', true]\\n\")), mdx(\"h2\", null, \"Conclusion\"), mdx(\"p\", null, \"While this post may not the one that you would use alot, but definately someday you will find a way to use it. Maybe you might end up using it like we did today with the product example.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"TypeScript - 05 - Tuples","date":"2020 July 7th","cover":{"publicURL":"/static/ts-part-5-da77a7ad2361c470b3940c1be8f7af41.png","childImageSharp":{"sizes":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='225'%20viewBox='0%200%20400%20225'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20113v112h401V0H0v113m26-44l2%202c2%200%202%201%202%2012l1%2012h6V83c0-11%200-12%202-12l2-2c0-3%200-3-7-3-8%200-8%200-8%203m70-1c-4%202-3%208%203%2014l4%206c-1%203-2%203-3%200-2-3-6-3-6%201%200%203%203%206%208%206%208%200%2010-8%203-16l-5-6c0-3%202-3%203-1%200%202%206%203%206%201%200-6-8-9-13-5m75%201l-1%202-1%204v3l1%206c0%208%202%2010%206%2011%204%200%204%200%204-2l-2-3c-3%200-3-12%200-12l1-2-1-2c-1%200-2-1-2-3s0-3-2-3l-3%201M42%2075l3%2010c2%2010%202%2010%201%2011-3%202-2%205%200%205%204%200%206-3%208-14%203-12%203-13-1-13-1%200-2%202-2%206l-1%206-2-6c-1-5-2-6-4-6l-2%201m17%200v14l1%2013h2c3%200%203%200%203-4s0-4%203-3c5%201%206-2%206-11l-1-8c-2-2-13-2-14-1m20%201c-3%203-3%2015%200%2017%204%204%2012%201%2012-4%200-3-5-3-6%200%200%203-2%202-3-1%200-3%200-3%205-3h4v-4c-1-7-8-9-12-5m35%200c-3%202-3%2015%200%2017%203%203%209%203%2010%200%203-4%202-6-1-6-2%200-3%200-3%202l-1%202-1-6%201-7%201%202c0%202%201%202%203%202s3%200%203-2c0-5-7-8-12-4m15%209v10h6v-7c0-7%201-8%203-8%201%200%202-1%202-3%200-3-1-4-3-2s-2%202-2%200l-3-1h-3v11m14%200v10h5V74h-5v11m9%203v14h3c2%200%203-1%203-4s0-4%203-3c4%201%205-1%205-10%200-10%200-11-8-11h-6v14m185%2017c-10%204-15%2011-16%2021-1%2014%205%2020%2023%2029%2014%207%2015%208%2015%2013%200%206-3%208-11%208-7%200-10-2-15-7l-3-3-7%204c-8%204-8%205-4%2010%2011%2014%2038%2017%2051%205%205-4%207-10%207-18%200-12-5-19-23-27-13-6-15-8-15-13%200-8%2011-10%2018-2l2%202%206-4%207-5c0-3-11-12-15-13h-20m-93%208v8h24v35l1%2036h17v-71h25v-16h-67v8m-197-2l2%202c2%200%202%201%202%2012v12h7v-12c0-11%200-12%202-12l2-2c0-2-1-2-7-2-7%200-8%200-8%202m105%2012v14h6v-28h-6v14m-69-9l-1%203-1%202%201%202%201%208c0%207%200%207%203%208l4%201c2-1%203-5%201-5s-3-2-3-8c0-3%200-4%202-4l1-2-1-2-2-3c0-3%200-3-2-3-3%200-3%200-3%203m-19%2012c0%2011%201%2013%205%2011h9v-10c0-10%200-10-2-10-3%200-3%200-3%208%200%206-1%208-2%209l-1-8v-9h-6v9m32-7c-3%204-3%2014%200%2017%203%202%207%203%2010%200%203-2%204-14%201-17-2-3-9-3-11%200m16%208v10h6v-7c0-7%201-8%203-8%201%200%202-1%202-3s-2-3-4-1h-1l-3-1h-3v10m25-8c-3%203-2%205%200%205l3-1c1-3%203-2%203%200l-4%203c-4%203-6%206-4%209s5%204%206%202h8l-1-9-1-10c-2-2-8-1-10%201'%20fill='%23639'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.7793594306049823,"src":"/static/da77a7ad2361c470b3940c1be8f7af41/40ffe/ts-part-5.png","srcSet":"/static/da77a7ad2361c470b3940c1be8f7af41/46604/ts-part-5.png 500w,\n/static/da77a7ad2361c470b3940c1be8f7af41/40ffe/ts-part-5.png 960w","sizes":"(max-width: 960px) 100vw, 960px"}}}},"fields":{"readingTime":{"text":"3 min read","words":467}}}},"pageContext":{"slug":"/posts/2020/2020-07-07-ts-tuples/"}}}