{"componentChunkName":"component---src-components-templates-blog-post-js","path":"/posts/2020/2020-07-08-ts-enums/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"TypeScript - 06 - Enums\",\n  \"date\": \"2020-07-08T00:00:00.000Z\",\n  \"published\": true,\n  \"cover\": \"./img/ts-part-6.png\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In this post, we will be looking at a feature of TypeScript which exists in many other programming languages, but JavaScript lacks this feature.\"), mdx(\"p\", null, \"If this feature existed in JavaScript, then Redux would seem much easier. But don't worry, we are not going to talk about Redux in this tutorial.\"), mdx(\"p\", null, \"However, in this tutorial we will talk about Enums.\"), mdx(\"h2\", null, \"What is an Enum?\"), mdx(\"p\", null, \"Let's learn what an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"enum\"), \" while looking at the view from it in JavaScript.\"), mdx(\"h3\", null, \"Example\"), mdx(\"p\", null, \"For example, you are creating a game, and there are some specific actions the character performs based on the user.\"), mdx(\"p\", null, \"In a simple game, you might have the following actions:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Move Up\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Move Down\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Move Left\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Move Right\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Jump Up\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Duck Down\")), mdx(\"p\", null, \"Now while there might be actions, there are just some basic ones that came across my brain.\"), mdx(\"p\", null, \"Now, a way we can store these in normal JavaScript depends on the developer, but here are some common ways.\"), mdx(\"h4\", null, \"Method #1: Object\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const actions = {\\n  MOVE_UP: 'MOVE_UP',\\n  MOVE_DOWN: 'MOVE_DOWN',\\n  MOVE_LEFT: 'MOVE_LEFT',\\n  MOVE_RIGHT: 'MOVE_RIGHT',\\n  JUMP_UP: 'JUMP_UP',\\n  JUMP_DOWN: 'JUMP_DOWN',\\n};\\n\")), mdx(\"h4\", null, \"Method #2: Module File\"), mdx(\"p\", null, \"You might create a separate file to store these in:\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"controls.js\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"export const MOVE_UP = 'MOVE_UP';\\nexport const MOVE_DOWN = 'MOVE_DOWN';\\nexport const MOVE_LEFT = 'MOVE_LEFT';\\nexport const MOVE_RIGHT = 'MOVE_RIGHT';\\nexport const JUMP_UP = 'JUMP_UP';\\nexport const JUMP_DOWN = 'JUMP_DOWN';\\n\")), mdx(\"p\", null, \"You might be exporting them so you can use them in your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main\"), \" file then.\"), mdx(\"h3\", null, \"An Enum\"), mdx(\"p\", null, \"Now let's look at how an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"enum\"), \" might look like.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"enum actions {\\n  MOVE_UP,\\n  MOVE_DOWN,\\n  MOVE_LEFT,\\n  MOVE_RIGHT,\\n  JUMP_UP,\\n  JUMP_DOWN,\\n}\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NOTE:\"), \" Values in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"enum\"), \" do not have to be all UPPERCASE, I could have made them look like:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"enum actions {\\n  move_up,\\n  move_down,\\n  move_left,\\n  move_right,\\n  jump_up,\\n  jump_down,\\n}\\n\")), mdx(\"p\", null, \"So, how would we use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"enum\"), \" in our code. Well, actually it is very simple.\"), mdx(\"p\", null, \"Let's say we have a function that reacts upon a click of the user. And for this specific function, the user clicks the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MOVE UP\"), \" button.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"function move(action_gesture) {\\n  if (action_gesture === action.move_up) {\\n    character = character.x + 1;\\n  }\\n}\\n\")), mdx(\"p\", null, \"So the function above is just imaginary, and let's say that the character does move up, then the x coordinate of our character gets incremented.\"), mdx(\"p\", null, \"Now, you might say, well, why can't I do this instead of using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"enums\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"function move(action_gesture) {\\n  if (action_gesture === 'move_up') {\\n    character = character.x + 1;\\n  }\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Problem\"), \"\\nHere is the problem to the approach, let's say we are using these actions somewhere else in our program also. We will have to manually memorize these gestures the way we are saying them, or our code could get inconsistent.\"), mdx(\"p\", null, \"Now, let's also say that another function fires off that will \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.log()\"), \" each movement that occurs in our program. Here is the code so far.\"), mdx(\"p\", null, \"I went ahead and added a character object to replicate a simple game.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"const character = {\\n  x: 0,\\n  y: 0,\\n  z: 0,\\n};\\n\\nfunction move(action_gesture) {\\n  debug(action_gesture);\\n  if (action_gesture === 'move_up') {\\n    character = character.x + 1;\\n  }\\n}\\n\\nfunction debug(action_gesture) {\\n  if (action_gesture === 'move_up') {\\n    console.log('The character moved up');\\n  }\\n}\\n\")), mdx(\"p\", null, \"Now, if you notice that I have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"two\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"if\"), \" statements in two different functions, and both of them are dependent on the fact that I provide the correct string value for each of them.\"), mdx(\"p\", null, \"For this exact reason we have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"enums\"), \". They essentially create the variables we need for us. If you want to think of it that way.\"), mdx(\"p\", null, \"So, let's modify the code above for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"enums\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"const character = {\\n  x: 0,\\n  y: 0,\\n  z: 0,\\n};\\n\\nenum Actions {\\n  MOVE_UP,\\n  MOVE_DOWN,\\n  MOVE_LEFT,\\n  MOVE_RIGHT,\\n  JUMP_UP,\\n  JUMP_DOWN,\\n}\\n\\nfunction move(action_gesture) {\\n  debug(action_gesture);\\n  if (action_gesture === Actions.MOVE_UP) {\\n    character = character.x + 1;\\n  }\\n}\\n\\nfunction debug(action_gesture) {\\n  if (action_gesture === Actions.MOVE_UP) {\\n    console.log('The character moved up');\\n  }\\n}\\n\")), mdx(\"p\", null, \"So, now you can see how consistent our code has become. This also allows our editor intellisense to kick in and help us out.\"), mdx(\"h3\", null, \"Looking Deeply\"), mdx(\"p\", null, \"This whole time we have been looking at how \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"enums\"), \" can help us, but we didn't a touch a bit on the topic of the values of these \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"enums\"), \".\"), mdx(\"p\", null, \"So, why not do that right now!\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"enum Actions {\\n  MOVE_UP,\\n  MOVE_DOWN,\\n  MOVE_LEFT,\\n  MOVE_RIGHT,\\n  JUMP_UP,\\n  JUMP_DOWN,\\n}\\n\\nconsole.log(Actions.MOVE_UP);\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Reminder: To compile our \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"typescript\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"javascript\"), \" to run either via \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"nodejs\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"browser\"), \", we run: \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"tsc main.ts\"), \".\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Result\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"0\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0\"), \"! You might be surprised, well this was expected behavior. Let's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.log()\"), \" the rest of them and see our result.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"...\\nconsole.log(Actions.MOVE_UP);\\nconsole.log(Actions.MOVE_DOWN);\\nconsole.log(Actions.MOVE_LEFT);\\nconsole.log(Actions.MOVE_RIGHT);\\nconsole.log(Actions.JUMP_UP);\\nconsole.log(Actions.JUMP_DOWN);\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Result\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"0\\n1\\n2\\n3\\n4\\n5\\n\")), mdx(\"p\", null, \"So what would this mean, well instead of telling you, let me show you the compiled JavaScript code that TypeScript generates.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"var Actions;\\n(function (Actions) {\\n  Actions[(Actions['MOVE_UP'] = 0)] = 'MOVE_UP';\\n  Actions[(Actions['MOVE_DOWN'] = 1)] = 'MOVE_DOWN';\\n  Actions[(Actions['MOVE_LEFT'] = 2)] = 'MOVE_LEFT';\\n  Actions[(Actions['MOVE_RIGHT'] = 3)] = 'MOVE_RIGHT';\\n  Actions[(Actions['JUMP_UP'] = 4)] = 'JUMP_UP';\\n  Actions[(Actions['JUMP_DOWN'] = 5)] = 'JUMP_DOWN';\\n})(Actions || (Actions = {}));\\n\")), mdx(\"p\", null, \"Now, do not get scared by the code that you are seeing. Let's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.log()\"), \" the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Actions\"), \" variable.\"), mdx(\"p\", null, \"What I did was that I created a separate JavaScript file and put the compiled code inside of it, then ran it in the browser.\"), mdx(\"p\", null, \"Here is the output:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"{\\n  0: \\\"MOVE_UP\\\",\\n  1: \\\"MOVE_DOWN\\\",\\n  2: \\\"MOVE_LEFT\\\",\\n  3: \\\"MOVE_RIGHT\\\",\\n  4: \\\"JUMP_UP\\\",\\n  5: \\\"JUMP_DOWN\\\",\\n  JUMP_DOWN: 5,\\n  JUMP_UP: 4,\\n  MOVE_DOWN: 1,\\n  MOVE_LEFT: 2,\\n  MOVE_RIGHT: 3,\\n  MOVE_UP: 0\\n}\\n\")), mdx(\"p\", null, \"So, what is happening? Let's do this in our TypeScript file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"console.log(Actions[5]);\\nconsole.log(Actions['JUMP_DOWN']);\\n\")), mdx(\"p\", null, \"Well, they essentially \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.log()\"), \" each other.\"), mdx(\"p\", null, \"If we were to modify our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"enum\"), \" with this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"enum Actions {\\n  MOVE_UP = 2,\\n  MOVE_DOWN = 3,\\n  MOVE_LEFT,\\n  MOVE_RIGHT,\\n  JUMP_UP,\\n  JUMP_DOWN,\\n}\\n\")), mdx(\"p\", null, \"So what we have done is given different values to each one of our values in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"enum\"), \".\"), mdx(\"p\", null, \"Now if we were to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.log()\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Actions.MOVE_UP\"), \" it will show \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"2\"), \".\"), mdx(\"h3\", null, \"Resolving the Case\"), mdx(\"p\", null, \"If you were tracking along and if your brain is still confused, don't worry, we will fix it here.\"), mdx(\"p\", null, \"Basically, here is what happens when we create an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"enum\"), \" alternative in normal JavaScript.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const Actions = {\\n  MOVE_UP = 0,\\n  MOVE_DOWN = 1,\\n  MOVE_LEFT = 2,\\n  MOVE_RIGHT = 3,\\n  JUMP_UP = 4,\\n  JUMP_DOWN = 5,\\n}\\n\")), mdx(\"p\", null, \"This should be the moment of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ahhhh\"), \". Now, when I was doing this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"enum Actions {\\n  MOVE_UP = 4;\\n}\\n\")), mdx(\"p\", null, \"I was essentially modifying the value of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MOVE_UP\"), \".\"), mdx(\"p\", null, \"We can even use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"strings\"), \" instead of numbers.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"enum Actions {\\n  MOVE_UP = 'apples',\\n  MOVE_DOWN = 'oranges',\\n}\\n\")), mdx(\"h2\", null, \"Review\"), mdx(\"p\", null, \"Let's quickly review. An \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"enum\"), \" is a convenient way to define constant variables. With \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"enums\"), \" we can assign custom values and use them to evaluate in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"if\"), \" statements in the situation of let's say a game or something.\"), mdx(\"h2\", null, \"Conclusion\"), mdx(\"p\", null, \"I hope this post wasn't too confusing, but playing around with the code should make this post seem easier to read!\"), mdx(\"p\", null, \"I will be attempting to create review projects for us to start understanding how we can use TypeScript and our previous HTML, CSS and JavaScript skill sets together!\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"TypeScript - 06 - Enums","date":"2020 July 8th","cover":{"publicURL":"/static/ts-part-6-6e4941928cb14cbbbba708f49b4716d4.png","childImageSharp":{"sizes":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='225'%20viewBox='0%200%20400%20225'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20113v112h401V0H0v113m26-44l2%202c2%200%202%201%202%2012l1%2012h6V83c0-11%200-12%202-12l2-2c0-3%200-3-7-3-8%200-8%200-8%203m70-1c-4%202-3%208%203%2014l4%206c-1%203-2%203-3%200-2-3-6-3-6%201%200%203%203%206%208%206%208%200%2010-8%203-16l-5-6c0-3%202-3%203-1%200%202%206%203%206%201%200-6-8-9-13-5m75%201l-1%202-1%204v3l1%206c0%208%202%2010%206%2011%204%200%204%200%204-2l-2-3c-3%200-3-12%200-12l1-2-1-2c-1%200-2-1-2-3s0-3-2-3l-3%201M42%2075l3%2010c2%2010%202%2010%201%2011-3%202-2%205%200%205%204%200%206-3%208-14%203-12%203-13-1-13-1%200-2%202-2%206l-1%206-2-6c-1-5-2-6-4-6l-2%201m17%200v14l1%2013h2c3%200%203%200%203-4s0-4%203-3c5%201%206-2%206-11l-1-8c-2-2-13-2-14-1m20%201c-3%203-3%2015%200%2017%204%204%2012%201%2012-4%200-3-5-3-6%200%200%203-2%202-3-1%200-3%200-3%205-3h4v-4c-1-7-8-9-12-5m35%200c-3%202-3%2015%200%2017%203%203%209%203%2010%200%203-4%202-6-1-6-2%200-3%200-3%202l-1%202-1-6%201-7%201%202c0%202%201%202%203%202s3%200%203-2c0-5-7-8-12-4m15%209v10h6v-7c0-7%201-8%203-8%201%200%202-1%202-3%200-3-1-4-3-2s-2%202-2%200l-3-1h-3v11m14%200v10h5V74h-5v11m9%203v14h3c2%200%203-1%203-4s0-4%203-3c4%201%205-1%205-10%200-10%200-11-8-11h-6v14m185%2017c-10%204-15%2011-16%2021-1%2014%205%2020%2023%2029%2014%207%2015%208%2015%2013%200%206-3%208-11%208-7%200-10-2-15-7l-3-3-7%204c-8%204-8%205-4%2010%2011%2014%2038%2017%2051%205%205-4%207-10%207-18%200-12-5-19-23-27-13-6-15-8-15-13%200-8%2011-10%2018-2l2%202%206-4%207-5c0-3-11-12-15-13h-20m-93%208v8h24v35l1%2036h17v-71h25v-16h-67v8m-197-2l2%202c2%200%202%201%202%2012v12h7v-12c0-11%200-12%202-12l2-2c0-2-1-2-7-2-7%200-8%200-8%202m105%2012v14h6v-28h-6v14m-69-9l-1%203-1%202%201%202%201%208c0%207%200%207%203%208l4%201c2-1%203-5%201-5s-3-2-3-8c0-3%200-4%202-4l1-2-1-2-2-3c0-3%200-3-2-3-3%200-3%200-3%203m-19%2012c0%2011%201%2013%205%2011h9v-10c0-10%200-10-2-10-3%200-3%200-3%208%200%206-1%208-2%209l-1-8v-9h-6v9m32-7c-3%204-3%2014%200%2017%203%202%207%203%2010%200%203-2%204-14%201-17-2-3-9-3-11%200m16%208v10h6v-7c0-7%201-8%203-8%201%200%202-1%202-3s-2-3-4-1h-1l-3-1h-3v10m25-8c-3%203-2%205%200%205l3-1c1-3%203-2%203%200l-4%203c-4%203-6%206-4%209s5%204%206%202h8l-1-9-1-10c-2-2-8-1-10%201m-18%2045c-1%203%200%2013%202%2014%203%202%206%200%206-5%200-3-1-4-3-4s-3-4-1-4l1%201%202%201v-3h-7'%20fill='%23639'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.7793594306049823,"src":"/static/6e4941928cb14cbbbba708f49b4716d4/40ffe/ts-part-6.png","srcSet":"/static/6e4941928cb14cbbbba708f49b4716d4/46604/ts-part-6.png 500w,\n/static/6e4941928cb14cbbbba708f49b4716d4/40ffe/ts-part-6.png 960w","sizes":"(max-width: 960px) 100vw, 960px"}}}}}},"pageContext":{"slug":"/posts/2020/2020-07-08-ts-enums/"}}}