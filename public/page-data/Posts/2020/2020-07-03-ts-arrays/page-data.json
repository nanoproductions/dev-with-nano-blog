{"componentChunkName":"component---src-components-templates-blog-post-js","path":"/posts/2020/2020-07-03-ts-arrays/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"TypeScript - 04 - Array\",\n  \"date\": \"2020-07-03T00:00:00.000Z\",\n  \"published\": true,\n  \"cover\": \"./img/ts-part-4.png\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"We have already looked at how we can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"strings\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"numbers\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"booleans\"), \" in TypeScript. But our programs consist of much more than that.\"), mdx(\"p\", null, \"In this tutorial, we will talk about Arrays in TypeScript.\"), mdx(\"h2\", null, \"JavaScript Array\"), mdx(\"p\", null, \"Let's look at the many different ways we use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arrays\"), \" in normal Vanilla JavaScript.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"let fruits = ['apples', 'oranges', 'grapefruit'];\\n\\nlet ages = [24, 22, 10, 15, 13, 10, 9, 3];\\n\\nlet isCool = [true, true, true, false, true, true];\\n\")), mdx(\"p\", null, \"Above, we have three arrays with different data.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The first array consists of strings.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The second array consists of numbers.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The third one, weird enough, contains booleans of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"true\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"false\"), \".\")), mdx(\"p\", null, \"Now, why I am I telling you this. Well, as you saw, TypeScript let's you define types of almost everything in your program, and we saw that with variables.\"), mdx(\"p\", null, \"If for say, what if this were to happen to our code.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"let fruits = ['apples', 'oranges', 'grapefruit'];\\n\\nfruits.push(2);\\n\")), mdx(\"p\", null, \"So, what happened? Well, we added the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"number\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"2\"), \" to our array of fruits.\\nIf this were to happen, this could actually mess up our program.\"), mdx(\"p\", null, \"What if the data above was todo's for a specific users in our program? Then accidently we add a number to it. Now this creates a bug in our program that we didn't expect.\"), mdx(\"h2\", null, \"TypeScript Arrays\"), mdx(\"p\", null, \"Let's finally look at how to work with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arrays\"), \" in TypeScript.\"), mdx(\"p\", null, \"So, we have an array of fruits, and it contains the data type of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"strings\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"let fruits = ['apples', 'oranges', 'strawberry'];\\n\")), mdx(\"p\", null, \"To assign a type to this array, with the data containing strings, we do:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"let fruits: string[] = ['apples', 'oranges', 'strawberry'];\\n\")), mdx(\"p\", null, \"Basically, we define that the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"strings\"), \" are an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"array\"), \". Simple enough, right?\"), mdx(\"h3\", null, \"Challenge\"), mdx(\"p\", null, \"Turn the following normal JavaScript arrays to TypeScript type defined arrays.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"let ages = [24, 22, 10, 15, 13, 10, 9, 3];\\n\\nlet isCool = [true, true, true, false, true, true];\\n\")), mdx(\"h3\", null, \"Solution\"), mdx(\"p\", null, \"Well, you should be able to have done that exercise with your eyes closed most likely.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"let ages: number[] = [24, 22, 10, 15, 13, 10, 9, 3];\\n\\nlet isCool: boolean[] = [true, true, true, false, true, true];\\n\")), mdx(\"h3\", null, \"Alternative way to write\"), mdx(\"p\", null, \"Now, there is another way to write arrays in TypeScript.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"let fruits: Array<string> = ['apples', 'oranges', 'strawberry'];\\n\")), mdx(\"p\", null, \"In this example, we tell TypeScript it is an array, and we tell it contains strings. This way is more generaic as you get to define the words clearly, but is a bit more letters.\"), mdx(\"h3\", null, \"Challenge\"), mdx(\"p\", null, \"Once again, transfer these arrays into the generaic way we discussed.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"let ages: number[] = [24, 22, 10, 15, 13, 10, 9, 3];\\n\\nlet isCool: boolean[] = [true, true, true, false, true, true];\\n\")), mdx(\"h3\", null, \"Solution\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"let ages: Array<number> = [24, 22, 10, 15, 13, 10, 9, 3];\\n\\nlet isCool: Array<boolean> = [true, true, true, false, true, true];\\n\")), mdx(\"h2\", null, \"Review\"), mdx(\"p\", null, \"So, there are 2 ways to write an array in TypeScript.\"), mdx(\"p\", null, \"One way to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[]\"), \" and another way to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Array<type>\")), mdx(\"h2\", null, \"Next Up\"), mdx(\"p\", null, \"In the next tutorial, we will learn about Tuples and how they can be useful in TypeScript.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"TypeScript - 04 - Array","date":"2020 July 3rd","cover":{"publicURL":"/static/ts-part-4-b3abbffa6d1497382675bba46a4edd50.png","childImageSharp":{"sizes":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='225'%20viewBox='0%200%20400%20225'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20113v112h401V0H0v113m26-44l2%202c2%200%202%201%202%2012l1%2012h6V83c0-11%200-12%202-12l2-2c0-3%200-3-7-3-8%200-8%200-8%203m70-1c-4%202-3%208%203%2014l4%206c-1%203-2%203-3%200-2-3-6-3-6%201%200%203%203%206%208%206%208%200%2010-8%203-16l-5-6c0-3%202-3%203-1%200%202%206%203%206%201%200-6-8-9-13-5m75%201l-1%202-1%204v3l1%206c0%208%202%2010%206%2011%204%200%204%200%204-2l-2-3c-3%200-3-12%200-12l1-2-1-2c-1%200-2-1-2-3s0-3-2-3l-3%201M42%2075l3%2010c2%2010%202%2010%201%2011-3%202-2%205%200%205%204%200%206-3%208-14%203-12%203-13-1-13-1%200-2%202-2%206l-1%206-2-6c-1-5-2-6-4-6l-2%201m17%200v14l1%2013h2c3%200%203%200%203-4s0-4%203-3c5%201%206-2%206-11l-1-8c-2-2-13-2-14-1m20%201c-3%203-3%2015%200%2017%204%204%2012%201%2012-4%200-3-5-3-6%200%200%203-2%202-3-1%200-3%200-3%205-3h4v-4c-1-7-8-9-12-5m35%200c-3%202-3%2015%200%2017%203%203%209%203%2010%200%203-4%202-6-1-6-2%200-3%200-3%202l-1%202-1-6%201-7%201%202c0%202%201%202%203%202s3%200%203-2c0-5-7-8-12-4m15%209v10h6v-7c0-7%201-8%203-8%201%200%202-1%202-3%200-3-1-4-3-2s-2%202-2%200l-3-1h-3v11m14%200v10h5V74h-5v11m9%203v14h3c2%200%203-1%203-4s0-4%203-3c4%201%205-1%205-10%200-10%200-11-8-11h-6v14m185%2017c-10%204-15%2011-16%2021-1%2014%205%2020%2023%2029%2014%207%2015%208%2015%2013%200%206-3%208-11%208-7%200-10-2-15-7l-3-3-7%204c-8%204-8%205-4%2010%2011%2014%2038%2017%2051%205%205-4%207-10%207-18%200-12-5-19-23-27-13-6-15-8-15-13%200-8%2011-10%2018-2l2%202%206-4%207-5c0-3-11-12-15-13h-20m-93%208v8h24v35l1%2036h17v-71h25v-16h-67v8m-197-2l2%202c2%200%202%201%202%2012v12h7v-12c0-11%200-12%202-12l2-2c0-2-1-2-7-2-7%200-8%200-8%202m105%2012v14h6v-28h-6v14m-69-9l-1%203-1%202%201%202%201%208c0%207%200%207%203%208l4%201c2-1%203-5%201-5s-3-2-3-8c0-3%200-4%202-4l1-2-1-2-2-3c0-3%200-3-2-3-3%200-3%200-3%203m-19%2012c0%2011%201%2013%205%2011h9v-10c0-10%200-10-2-10-3%200-3%200-3%208%200%206-1%208-2%209l-1-8v-9h-6v9m32-7c-3%204-3%2014%200%2017%203%202%207%203%2010%200%203-2%204-14%201-17-2-3-9-3-11%200m16%208v10h6v-7c0-7%201-8%203-8%201%200%202-1%202-3s-2-3-4-1h-1l-3-1h-3v10m25-8c-3%203-2%205%200%205l3-1c1-3%203-2%203%200l-4%203c-4%203-6%206-4%209s5%204%206%202h8l-1-9-1-10c-2-2-8-1-10%201'%20fill='%23639'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.7793594306049823,"src":"/static/b3abbffa6d1497382675bba46a4edd50/40ffe/ts-part-4.png","srcSet":"/static/b3abbffa6d1497382675bba46a4edd50/46604/ts-part-4.png 500w,\n/static/b3abbffa6d1497382675bba46a4edd50/40ffe/ts-part-4.png 960w","sizes":"(max-width: 960px) 100vw, 960px"}}}}}},"pageContext":{"slug":"/posts/2020/2020-07-03-ts-arrays/"}}}