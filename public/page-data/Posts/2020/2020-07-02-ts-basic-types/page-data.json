{"componentChunkName":"component---src-components-templates-blog-post-js","path":"/posts/2020/2020-07-02-ts-basic-types/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"TypeScript - 03 - Basic Types\",\n  \"date\": \"2020-07-02T00:00:00.000Z\",\n  \"published\": true,\n  \"cover\": \"./img/ts-part-3.png\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In the precious article we went over installing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tsc\"), \" tool on our system. For that tool to be worth anything let's learn some TypeScript.\"), mdx(\"p\", null, \"Remember, if you need to run any of the TypeScript code, you can with:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"tsc file_name.ts\\n\")), mdx(\"h2\", null, \"Basic Types\"), mdx(\"p\", null, \"JavaScript has many different data types but we never have to declare them so we don't know when we are using what type or what.\"), mdx(\"p\", null, \"In a plain JavaScript file, let's look at how we can identify types in JavaScript.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"let personName = 'Nano'\\n\\nconsole.log(typeof personName)\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"typeof\"), \" will give us the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type\"), \" of the variable \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"personName\"), \".\"), mdx(\"p\", null, \"Now, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"typeof\"), \" could help us in a normal JavaScript program if we did not have TypeScript, but it would make our program very messy.\"), mdx(\"p\", null, \"In the first post, we had this example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function add(num1, num2) {\\n  return num1 + num2\\n}\\n// Simulating an error where we put our `Numbers` in a string.\\nlet numbers = ['2', '3']\\nconsole.log(add(numbers[0], numbers[1]))\\n// Result = 23\\n\")), mdx(\"p\", null, \"The issue in this code was that the numbers we were passing into the function were \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"strings\"), \" and not actually \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"numbers\"), \". Which resulted in concatenation of strings.\"), mdx(\"p\", null, \"This could be prevented with TypeScript, but let's look at how we can do this with simple \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"if\"), \" statements. As you study the code, try to see why \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"if\"), \" statements are not the best route.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function add(num1, num2) {\\n  if (typeof num1 !== 'number' || typeof num2 !== 'number') {\\n    console.log('Please supply numbers to this function')\\n  }\\n  return num1 + num2\\n}\\n// Simulating an error where we put our `Numbers` in a string.\\nlet numbers = ['2', '3']\\nconsole.log(add(numbers[0], numbers[1]))\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Result\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Please supply numbers to this function\\n\")), mdx(\"p\", null, \"The issue with this method is clear, it is alot of repatative code. Now let's say this function took 10 arguements, that means we have to run about 10 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"if\"), \" statements to get the function ready for production.\"), mdx(\"p\", null, \"Also, each line of code is adding bytes to our program which would make it heavier.\"), mdx(\"h3\", null, \"Strings\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"let personName = 'Nano'\\nconsole.log(typeof personName)\\n\\n// Result = string\\n\")), mdx(\"h3\", null, \"Numbers\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"let age = 50\\nconsole.log(typeof age)\\n\\n// Result = Number\\n\")), mdx(\"p\", null, \"The code examples above are just for you to gain some practice working with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"typeof\"), \". Now, how would we write these types in TypeScript. Well, very simple.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"let personName: string = 'Nano'\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"let age: number = 50\\n\")), mdx(\"p\", null, \"Simple. Isn't it.\"), mdx(\"h2\", null, \"Practice\"), mdx(\"p\", null, \"Create three variables with the following attributes:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A variable with a name of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"isCool\"), \" and setting it to a type with a value.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A variable that is declared with the type of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"string\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A variable with any name but with a type of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"number\"), \" and any value.\")), mdx(\"h2\", null, \"Solution\"), mdx(\"p\", null, \"Hopefully, you completed the practice, let's see if you were right. I have posted examples as answers, but if your answer was within in range, you are right!\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Task: A variable with a name of \", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"isCool\"), \" and setting it to a type with a value.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"let isCool: boolean = true\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Task: A variable that is declared with the type of \", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"string\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"let personName: string\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Task: A variable with any name but with a type of \", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"number\"), \" and any value.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"let NumberOfPets: number = 12\\n\")), mdx(\"h2\", null, \"Conclusion\"), mdx(\"p\", null, \"In this article, you have learned how we type assignment is helpful in TypeScript and how we can use type assignment in TypeScript.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"TypeScript - 03 - Basic Types","date":"2020 July 2nd","cover":{"publicURL":"/static/ts-part-3-782af822e7c23df0de129567d965ef8f.png","childImageSharp":{"sizes":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='225'%20viewBox='0%200%20400%20225'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20113v112h401V0H0v113m26-44l2%202c2%200%202%201%202%2012l1%2012h6V83c0-11%200-12%202-12l2-2c0-3%200-3-7-3-8%200-8%200-8%203m70-1c-4%202-3%208%203%2014l4%206c-1%203-2%203-3%200-2-3-6-3-6%201%200%203%203%206%208%206%208%200%2010-8%203-16l-5-6c0-3%202-3%203-1%200%202%206%203%206%201%200-6-8-9-13-5m75%201l-1%202-1%204v3l1%206c0%208%202%2010%206%2011%204%200%204%200%204-2l-2-3c-3%200-3-12%200-12l1-2-1-2c-1%200-2-1-2-3s0-3-2-3l-3%201M42%2075l3%2010c2%2010%202%2010%201%2011-3%202-2%205%200%205%204%200%206-3%208-14%203-12%203-13-1-13-1%200-2%202-2%206l-1%206-2-6c-1-5-2-6-4-6l-2%201m17%200v14l1%2013h2c3%200%203%200%203-4s0-4%203-3c5%201%206-2%206-11l-1-8c-2-2-13-2-14-1m20%201c-3%203-3%2015%200%2017%204%204%2012%201%2012-4%200-3-5-3-6%200%200%203-2%202-3-1%200-3%200-3%205-3h4v-4c-1-7-8-9-12-5m35%200c-3%202-3%2015%200%2017%203%203%209%203%2010%200%203-4%202-6-1-6-2%200-3%200-3%202l-1%202-1-6%201-7%201%202c0%202%201%202%203%202s3%200%203-2c0-5-7-8-12-4m15%209v10h6v-7c0-7%201-8%203-8%201%200%202-1%202-3%200-3-1-4-3-2s-2%202-2%200l-3-1h-3v11m14%200v10h5V74h-5v11m9%203v14h3c2%200%203-1%203-4s0-4%203-3c4%201%205-1%205-10%200-10%200-11-8-11h-6v14m185%2017c-10%204-15%2011-16%2021-1%2014%205%2020%2023%2029%2014%207%2015%208%2015%2013%200%206-3%208-11%208-7%200-10-2-15-7l-3-3-7%204c-8%204-8%205-4%2010%2011%2014%2038%2017%2051%205%205-4%207-10%207-18%200-12-5-19-23-27-13-6-15-8-15-13%200-8%2011-10%2018-2l2%202%206-4%207-5c0-3-11-12-15-13h-20m-93%208v8h24v35l1%2036h17v-71h25v-16h-67v8m-197-2l2%202c2%200%202%201%202%2012v12h7v-12c0-11%200-12%202-12l2-2c0-2-1-2-7-2-7%200-8%200-8%202m105%2012v14h6v-28h-6v14m-69-9l-1%203-1%202%201%202%201%208c0%207%200%207%203%208l4%201c2-1%203-5%201-5s-3-2-3-8c0-3%200-4%202-4l1-2-1-2-2-3c0-3%200-3-2-3-3%200-3%200-3%203m-19%2012c0%2011%201%2013%205%2011h9v-10c0-10%200-10-2-10-3%200-3%200-3%208%200%206-1%208-2%209l-1-8v-9h-6v9m32-7c-3%204-3%2014%200%2017%203%202%207%203%2010%200%203-2%204-14%201-17-2-3-9-3-11%200m16%208v10h6v-7c0-7%201-8%203-8%201%200%202-1%202-3s-2-3-4-1h-1l-3-1h-3v10m25-8c-3%203-2%205%200%205l3-1c1-3%203-2%203%200l-4%203c-4%203-6%206-4%209s5%204%206%202h8l-1-9-1-10c-2-2-8-1-10%201'%20fill='%23639'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.7793594306049823,"src":"/static/782af822e7c23df0de129567d965ef8f/40ffe/ts-part-3.png","srcSet":"/static/782af822e7c23df0de129567d965ef8f/46604/ts-part-3.png 500w,\n/static/782af822e7c23df0de129567d965ef8f/40ffe/ts-part-3.png 960w","sizes":"(max-width: 960px) 100vw, 960px"}}}},"fields":{"readingTime":{"text":"3 min read"}}}},"pageContext":{"slug":"/posts/2020/2020-07-02-ts-basic-types/"}}}